<?xml version="1.0" encoding="UTF-8"?>
<business-service xmlns="http://www.xxxxxx.com/bdf" name="com.xxxxxx.bes.omni.base.foundation.service.GenerateEntityService" display-name="返回流水号API">
  <transaction-manager transaction-manager-type="local"/>
   <operation name="generateEntityCode" display-name="生成实体编码" exception="SEQUENCE_ID_IS_NULL">
    <in-parameters>
      <parameter name="req" type="entity:com.xxxxxx.bes.omni.base.foundation.service.GenerateEntityCodeReqViewEntity">
          <description><![CDATA[ 生成实体编码。<br/>
              CodeClass 必填，目前只支持填写：AcctCode、CustCode、GroupCode。<br/>
              AcctCode时需要传factor: custType(客户户类型)取值- 1:个人;2:集团;3:家庭;4:匿名客户,<br/>
                  如 ( {"req":{"codeClass":"CustCode","factor":{"custType":"1"}}}]]></description>
      </parameter>
      <validation-rule name="checkreqempty">
          <error-condition><![CDATA[
            if( req == null)
            {
              return true;
            }
            return false;
        ]]></error-condition>
          <validation-message>omnichannel.extention.message.fieldcannotempty:{generateEntityCode},{req}</validation-message>
          <error-display-field>req</error-display-field>
          <description>req必传，不能为空。</description>
      </validation-rule>
      <validation-rule name="checkrvoNameempty">
          <error-condition><![CDATA[
            if( (req.codeClass==null) || (req.codeClass==""))
            {
              return true;
            }
            return false;
        ]]></error-condition>
          <validation-message>omnichannel.extention.message.fieldcannotempty:{generateEntityCode},{codeClass}</validation-message>
          <error-display-field>req.codeClass</error-display-field>
          <description>voName必传，不能为空。</description>
      </validation-rule>
    </in-parameters>
    <out-parameter
      type="entity:com.xxxxxx.bes.omni.base.foundation.service.GenerateEntityCodeResponseViewEntity" name="resp">
         <description><![CDATA[生成实体编码的返回值]]></description>
    </out-parameter>
    <description><![CDATA[根据类型生成对应的编码并返回。<br/>
      @logic
        调用CM的com.xxxxxx.bes.cm.base.customer.EntitySequenceService.generateEntityCode接口。<br/>
      @since V800R002C10]]>
    </description>
    <actions>
          <script><![CDATA[
            log.debug "generateEntityCode req: " + objectToJsonStr(req);
            //入参转换
            def cmreq = req.disassemble("com.xxxxxx.bes.cm.base.customer.GenerateEntityCodeRequest");
            log.debug "generateEntityCode cmreq: " + objectToJsonStr(cmreq);
            //调用cm接口
            def startQueryOfferingsTime = currentTimeMillis();
            def cmresp = callBusinessService("com.xxxxxx.bes.cm.base.customer.EntitySequenceService","generateEntityCode",cmreq);
            def queryOfferingsTime = currentTimeMillis() - startQueryOfferingsTime;
            log.debug "GenerateEntityByActionBOService#generateEntityCode(EntitySequenceService#generateEntityCode) Business Service Call.............................[cost " + queryOfferingsTime + "ms]";
            log.debug "generateEntityCode cmresp: " + objectToJsonStr(cmresp);
            if(null != cmresp){
                resp = GenerateEntityCodeResponseViewEntity.assemble(cmresp);
            }
            
            log.debug "generateEntityCode final resp: " + objectToJsonStr(resp);
          ]]></script>
     </actions>
  </operation>


  <binding-rpc />
  <binding-restful path="/bes/omni/custmgt/generateentitybs" />
  <description>生成流水号功能。</description>
</business-service>
